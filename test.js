// Generated by Haxe 4.2.0
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = true;
var Test = function() { };
Test.__name__ = true;
Test.main = function() {
	var document = window.document;
	var fragment = new DocumentFragment();
	var compile = document.createElement("button");
	compile.innerText = "compile";
	fragment.appendChild(compile);
	fragment.appendChild(document.createElement("br"));
	var input = document.createElement("textarea");
	input.cols = 80;
	input.rows = 50;
	fragment.appendChild(input);
	var result = document.createElement("textarea");
	result.cols = 80;
	result.rows = 50;
	fragment.appendChild(result);
	document.body.appendChild(fragment);
	try {
		input.value = js_Browser.getLocalStorage().getItem("code");
	} catch( _g ) {
	}
	compile.addEventListener("click",function(e) {
		var parser = dectiss_Parser.any(dectiss_Parser.then(dectiss_Parser.many(dectiss_Parser.uncapital),dectiss_Parser.optionnal(dectiss_Parser.space)));
		var _g = parser(input.value,0);
		switch(_g._hx_index) {
		case 0:
			result.value = "error!";
			console.log("Test.hx:40:","error!");
			break;
		case 1:
			var data = _g.data;
			result.value = data.capture;
			console.log("Test.hx:43:","good!");
			console.log("Test.hx:44:",data.capture);
			break;
		}
	});
	input.addEventListener("input",function(e) {
		js_Browser.getLocalStorage().setItem("code",e.target.value);
	});
};
var dectiss_ParseData = function(capture) {
	this.capture = capture;
};
dectiss_ParseData.__name__ = true;
var dectiss_ParseResult = $hxEnums["dectiss.ParseResult"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"dectiss.ParseResult",toString:$estr}
	,Some: ($_=function(data) { return {_hx_index:1,data:data,__enum__:"dectiss.ParseResult",toString:$estr}; },$_._hx_name="Some",$_.__params__ = ["data"],$_)
};
dectiss_ParseResult.__constructs__ = [dectiss_ParseResult.None,dectiss_ParseResult.Some];
var dectiss_Parser = function() { };
dectiss_Parser.__name__ = true;
dectiss_Parser.optionnal = function(rule) {
	var rule1 = rule;
	var min = 0;
	var max = 1;
	return function(text,start) {
		return dectiss_Parser.rangeLogic(rule1,min,max,text,start);
	};
};
dectiss_Parser.any = function(rule) {
	var rule1 = rule;
	var min = 0;
	var max = null;
	return function(text,start) {
		return dectiss_Parser.rangeLogic(rule1,min,max,text,start);
	};
};
dectiss_Parser.many = function(rule) {
	var rule1 = rule;
	var min = 1;
	var max = null;
	return function(text,start) {
		return dectiss_Parser.rangeLogic(rule1,min,max,text,start);
	};
};
dectiss_Parser.times = function(rule,times) {
	var rule1 = rule;
	var min = times;
	var max = times;
	return function(text,start) {
		return dectiss_Parser.rangeLogic(rule1,min,max,text,start);
	};
};
dectiss_Parser.ranged = function(rule,min,max) {
	var rule1 = rule;
	var min1 = min;
	var max1 = max;
	return function(text,start) {
		return dectiss_Parser.rangeLogic(rule1,min1,max1,text,start);
	};
};
dectiss_Parser.then = function(rule,ruleb) {
	return function(text,start) {
		var pos = 0;
		var content = "";
		var capture = rule(text,start);
		switch(capture._hx_index) {
		case 0:
			return dectiss_ParseResult.None;
		case 1:
			var data = capture.data;
			pos += data.capture.length;
			content += data.capture;
			break;
		}
		var capture = ruleb(text,start + pos);
		switch(capture._hx_index) {
		case 0:
			return dectiss_ParseResult.None;
		case 1:
			var data = capture.data;
			return dectiss_ParseResult.Some(new dectiss_ParseData(content + data.capture));
		}
	};
};
dectiss_Parser.or = function(rule,ruleb) {
	return function(text,start) {
		var capture = rule(text,start);
		switch(capture._hx_index) {
		case 0:
			break;
		case 1:
			var data = capture.data;
			return capture;
		}
		return ruleb(text,start);
	};
};
dectiss_Parser.matchSimple = function(rule,text,start) {
	if(rule.matchSub(text,start) && rule.matchedPos().pos == start) {
		return dectiss_ParseResult.Some(new dectiss_ParseData(rule.matched(0)));
	}
	return dectiss_ParseResult.None;
};
dectiss_Parser.manyLogic = function(rule,text,start) {
	var totalCapture = "";
	_hx_loop1: while(true) {
		var capture = rule(text,start + totalCapture.length);
		switch(capture._hx_index) {
		case 0:
			break _hx_loop1;
		case 1:
			var data = capture.data;
			totalCapture += data.capture;
			break;
		}
	}
	if(totalCapture.length == 0) {
		return dectiss_ParseResult.None;
	} else {
		return dectiss_ParseResult.Some(new dectiss_ParseData(totalCapture));
	}
};
dectiss_Parser.rangeLogic = function(rule,min,max,text,start) {
	var totalCapture = "";
	var count = 0;
	_hx_loop1: while(max == null || max > count) {
		var capture = rule(text,start + totalCapture.length);
		switch(capture._hx_index) {
		case 0:
			break _hx_loop1;
		case 1:
			var data = capture.data;
			totalCapture += data.capture;
			++count;
			break;
		}
	}
	if(count < min) {
		return dectiss_ParseResult.None;
	}
	return dectiss_ParseResult.Some(new dectiss_ParseData(totalCapture));
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		return null;
	}
};
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
dectiss_Parser.space = (function($this) {
	var $r;
	var rule = new EReg("\\s","mg");
	$r = function(text,start) {
		return dectiss_Parser.matchSimple(rule,text,start);
	};
	return $r;
}(this));
dectiss_Parser.digit = (function($this) {
	var $r;
	var rule = new EReg("\\d","mg");
	$r = function(text,start) {
		return dectiss_Parser.matchSimple(rule,text,start);
	};
	return $r;
}(this));
dectiss_Parser.alpha = (function($this) {
	var $r;
	var rule = new EReg("[a-z]","img");
	$r = function(text,start) {
		return dectiss_Parser.matchSimple(rule,text,start);
	};
	return $r;
}(this));
dectiss_Parser.capital = (function($this) {
	var $r;
	var rule = new EReg("[A-Z]","mg");
	$r = function(text,start) {
		return dectiss_Parser.matchSimple(rule,text,start);
	};
	return $r;
}(this));
dectiss_Parser.uncapital = (function($this) {
	var $r;
	var rule = new EReg("[a-z]","mg");
	$r = function(text,start) {
		return dectiss_Parser.matchSimple(rule,text,start);
	};
	return $r;
}(this));
Test.main();
})({});
